#!/bin/bash
#
# Usage: push
#
# Send your local branch changes to the remote branch,
# and copy the relevant GitHub 'compare' URL to your clipboard (!)
# This is Mac-only for the time being
#
# Any extra args to this command will be passed through to 'git push',
# e.g. for doing "push -f"
#

# Colors
color_error="$(tput sgr 0 1)$(tput setaf 1)"
color_success="$(tput setaf 10)"
color_reset="$(tput sgr0)"

# TODO DRY this b/w pull and push
branch=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/') || exit $?
default_remote="origin"
remote=$(git config "branch.${branch}.remote" || echo "$default_remote")
remote_branch=$( (git config "branch.${branch}.merge" || echo "refs/heads/$branch") | awk -F '/' '{ print $3 }' )
remote_url=$(git remote show $remote -n | grep Push | awk '{ print $3 }')

# Push & save output
push=$(git push --set-upstream $* $remote $remote_branch 2>&1)
exit_code=$?

if [ $exit_code != 0 ]; then
  echo -e "${color_error}Ouch, push failed!${color_reset} code=$exit_code, output=$push"
  exit $exit_code
fi

# Push tags
pushTags=$(git push --tags 2>&1)
if echo $pushTags | grep "\[new tag\]" >/dev/null; then
  echo -e "${color_success}Pushed new tags remotely:${color_reset}"
  echo "$pushTags"
  echo
fi

if echo $push | grep "Everything up-to-date" >/dev/null; then
  echo -e "${color_success}git says everything is up-to-date!${color_reset}"
  exit 0
fi

# Parse relevant commit refs and let user know what we did
# 1st-time push to new branch gets special treatment
if echo $push | grep "\[new branch\]" >/dev/null; then
  remotedefault=$(git branch -r | sed -n 's/origin\/HEAD.*origin\/\(.*\)$/\1/p' | tr -d ' ')
  remotedefault=${remotedefault:-master}
  old=$remotedefault
  new=$branch
  refs="$remotedefault...$branch"
  echo "Pushed new branch '$branch' remotely"
else
  if [[ "$remote_url" =~ "gitlab.just3things.com" ]]; then
    refs=$(echo $push | awk '{ print $16}' | sed 's/\.\./\.\.\./')
    old=$(echo $push | awk '{ print $16}' | sed 's/\..*$//')
    new=$(echo $push | awk '{ print $16}' | perl -ne 'm/\w+\.+(\w+)/; print "$1" ';)
  else
    refs=$(echo $push | awk '{ print $3}' | sed 's/\.\./\.\.\./')
    old=$(echo $push | awk '{ print $3}' | sed 's/\..*$//')
    new=$(echo $push | awk '{ print $3}' | perl -ne 'm/\w+\.+(\w+)/; print "$1" ';)
  fi
  echo "$push"
fi

if [[ "$remote_url" =~ "github.com" ]]; then

  if [[ ${remote_url:0:4} == "git@" ]]; then
    regEx='s/.*\:\(.*\)\.git/\1/'
    url='https://github.com/'
  elif [[ ${remote_url:0:4} == "ssh:" ]]; then
    regEx='s/ssh:\/\/git@\(.*\)\.git/\1/'
    url='https://'
  else
    regEx='s/\(.*\)\.git/\1/'
  fi

  repo_name=$(echo $remote_url | sed $regEx)
  github_url="$url$repo_name/compare/$refs"

  echo
  echo -e "${color_success}Compare URL copied to clipboard!${color_reset}"
  which pbcopy >& /dev/null && echo $github_url | pbcopy && echo $copied
  which xclip >& /dev/null && echo $github_url | xclip -selection clipboard && echo $copied

  echo $github_url
  echo
fi

if [[ "$remote_url" =~ "gitlab.just3things.com" ]]; then

  if [[ ${remote_url:0:4} == "git@" ]]; then
    regEx='s/.*\:\(.*\)\.git/\1/'
    url='https://gitlab.just3things.com/'
  elif [[ ${remote_url:0:4} == "ssh:" ]]; then
    regEx='s/ssh:\/\/git@\(.*\)\.git/\1/'
    url='https://'
  else
    regEx='s/\(.*\)\.git/\1/'
  fi

  repo_name=$(echo $remote_url | sed $regEx)
  compare_url="$url$repo_name/compare/$refs"
  pr_url=$(echo $push | awk '{ print $12}')

  echo
  echo -e "${color_success}Compare URL:${color_reset}"
  echo $compare_url
  echo

  echo -e "${color_success}PR URL copied to clipboard!${color_reset}"
  which pbcopy >& /dev/null && echo $pr_url | pbcopy && echo $copied
  which xclip >& /dev/null && echo $pr_url | xclip -selection clipboard && echo $copied
  echo $pr_url
  echo
fi

exit 0
